#! /usr/bin/env ruby

require 'autoproj'
require 'autoproj/autobuild'
require 'autoproj/cli/base'

Ops = Autoproj::Ops
Tools = Ops::Tools

cli = Autoproj::CLI::Base.new

update_from = nil
ignore_dependencies = false
with_osdeps = true
only_local = false
only_checkout = false
update_config = nil

parser = OptionParser.new do |opt|
    opt.on '--from DIR', "get all updates from the autoproj project currently checked out at DIR" do |path|
        path = File.expand_path(path, cli.root_dir)
        update_from = Autoproj::InstallationManifest.from_root(path)
    end
    opt.on('--[no-]config', 'also update the build configuration. Default if the configuration directory is given on the command line or if no arguments are given') do |flag|
        update_config = flag
    end
    opt.on('-n', '--no-deps', 'update only the packages listed on the command line and not their dependencies') do |value|
        ignore_dependencies = true
    end
    opt.on('-c', '--checkout', 'only checkout packages that are not there, do not update') do |value|
        only_checkout = value
    end
    opt.on('-k', '--keep-going', 'do not stop on error') do
        Autobuild.ignore_errors = true
    end
    opt.on("--[no-]osdeps", "disable osdeps handling") do |value|
        with_osdeps = value
    end
    opt.on("--local", "only use local information to update for importers that support it") do |value|
        only_local = value
    end
    opt.on('--nice NICE', Integer, 'nice the subprocesses to the given value') do |value|
        Autobuild.nice = value
    end
end
Tools.common_options(parser)

user_selection = parser.parse(ARGV)

Tools.report do
    if !with_osdeps
        cli.osdeps.osdeps_mode = []
    end
    _, config_selected = Tools.resolve_paths_in_argv(user_selection)
    if update_config.nil?
        update_config = config_selected
    end
    cli.initialize_and_load(
        user_selection,
        update_myself: with_osdeps && user_selection.empty?,
        only_checkout: only_checkout || (!user_selection.empty? && !update_config),
        only_local: only_local,
        update_from: update_from)

    import_packages = Ops::PackageImport.new(
        cli.manifest,
        only_checkout: only_checkout,
        only_local: only_local,
        update_from: update_from)
    if ignore_dependencies
        cli.resolved_selection.each do |pkg_name|
            import_packages.import_single_package(pkg_name)
        end
    else
        import_packages.import_packages(cli.resolved_selection)
    end
end

